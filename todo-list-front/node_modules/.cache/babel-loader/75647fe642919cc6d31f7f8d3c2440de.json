{"ast":null,"code":"var _jsxFileName = \"/Users/gaspardmoindrot/todo-list/todo-list-front/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Todos } from './Todos';\nimport { TodoInput } from './TodoInput';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initTodos = [{\n  text: '',\n  complete: false,\n  id: 0\n}];\n\nfunction App() {\n  _s();\n\n  const [todos, setTodos] = useState(initTodos);\n  /*useEffect(() => {\n    //DELETE request using fetch inside useEffect React hook\n    fetch('http://localhost:8080/state/delete/33', { method: 'DELETE' });\n    //empty dependency array means this effect will only run once (like componentDidMount in classes)\n  }, []);*/\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    let response = await (await fetch(\"http://localhost:8080/state/all\")).json();\n    setTodos(response);\n  };\n\n  const changeTodos = todo => {\n    /*const newTodos = todos.map(unitTodo => {\n      if (unitTodo === todo) {\n        unitTodo.complete = !unitTodo.complete;\n      }\n      return (unitTodo);\n    });\n    setTodos(newTodos);*/\n    fetch('http://localhost:8080/state/change/' + todo.id, {\n      method: 'PUT'\n    });\n  };\n\n  const addTodo = text => {\n    /*const newTodo = { text, complete: false , id: 0};\n    setTodos([...todos, newTodo]);*/\n    fetch('http://localhost:8080/state/add/', requestOptions).then(response => response.json()).then(data => setPostId(data.id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"mylist\",\n      children: /*#__PURE__*/_jsxDEV(Todos, {\n        todos: todos,\n        changeTodos: changeTodos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoInput, {\n      addTodo: addTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"lIJQon8IAP4YNP4NE5vTep+122Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/gaspardmoindrot/todo-list/todo-list-front/src/App.tsx"],"names":["React","useState","useEffect","Todos","TodoInput","initTodos","text","complete","id","App","todos","setTodos","fetchData","response","fetch","json","changeTodos","todo","method","addTodo","requestOptions","then","data","setPostId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,WAAP;;;AAEA,MAAMC,SAAiB,GAAG,CACxB;AACEC,EAAAA,IAAI,EAAE,EADR;AAEEC,EAAAA,QAAQ,EAAE,KAFZ;AAGEC,EAAAA,EAAE,EAAE;AAHN,CADwB,CAA1B;;AAQA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACI,SAAD,CAAlC;AAEA;AACF;AACA;AACA;AACA;;AAEEH,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,SAAS,GAAG,YAAY;AAC5B,QAAIC,QAAQ,GAAG,MAAM,CACnB,MAAMC,KAAK,CAAC,iCAAD,CADQ,EAEnBC,IAFmB,EAArB;AAGAJ,IAAAA,QAAQ,CAACE,QAAD,CAAR;AACD,GALD;;AAOA,QAAMG,WAAwB,GAAIC,IAAD,IAAgB;AAC/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACIH,IAAAA,KAAK,CAAC,wCAAwCG,IAAI,CAACT,EAA9C,EAAkD;AAAEU,MAAAA,MAAM,EAAE;AAAV,KAAlD,CAAL;AACD,GATD;;AAWA,QAAMC,OAAgB,GAAIb,IAAD,IAAkB;AACzC;AACJ;AACIQ,IAAAA,KAAK,CAAC,kCAAD,EAAqCM,cAArC,CAAL,CACKC,IADL,CACUR,QAAQ,IAAIA,QAAQ,CAACE,IAAT,EADtB,EAEKM,IAFL,CAEUC,IAAI,IAAIC,SAAS,CAACD,IAAI,CAACd,EAAN,CAF3B;AAGD,GAND;;AAQA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAIE,KAAhB;AAAuB,QAAA,WAAW,EAAIM;AAAtC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAEG;AAApB;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AASD;;GAhDQV,G;;KAAAA,G;AAkDT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Todos } from './Todos';\nimport { TodoInput } from './TodoInput';\nimport './App.css';\n\nconst initTodos: Todo[] = [\n  {\n    text: '',\n    complete: false,\n    id: 0,\n  },\n];\n\nfunction App() {\n  const [todos, setTodos] = useState(initTodos);\n\n  /*useEffect(() => {\n    //DELETE request using fetch inside useEffect React hook\n    fetch('http://localhost:8080/state/delete/33', { method: 'DELETE' });\n    //empty dependency array means this effect will only run once (like componentDidMount in classes)\n  }, []);*/\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    let response = await (\n      await fetch(\"http://localhost:8080/state/all\")\n    ).json();\n    setTodos(response);\n  };\n\n  const changeTodos: ChangeTodos = (todo: Todo) => {\n    /*const newTodos = todos.map(unitTodo => {\n      if (unitTodo === todo) {\n        unitTodo.complete = !unitTodo.complete;\n      }\n      return (unitTodo);\n    });\n    setTodos(newTodos);*/\n    fetch('http://localhost:8080/state/change/' + todo.id, { method: 'PUT' });\n  };\n\n  const addTodo: AddTodo = (text: string) => {\n    /*const newTodo = { text, complete: false , id: 0};\n    setTodos([...todos, newTodo]);*/\n    fetch('http://localhost:8080/state/add/', requestOptions)\n        .then(response => response.json())\n        .then(data => setPostId(data.id));\n  };\n\n  return (\n    <>\n      <h1>Todos</h1>\n      <ul className=\"mylist\">\n        <Todos todos = {todos} changeTodos = {changeTodos} />\n      </ul>\n      <TodoInput addTodo={addTodo} />\n    </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}