{"ast":null,"code":"var _jsxFileName = \"/Users/gaspardmoindrot/todo-list/todo-list-front/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Todos } from './Todos';\nimport { TodoInput } from './TodoInput';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initTodos = [{\n  text: '',\n  complete: false,\n  id: 0\n}];\n\nfunction App() {\n  _s();\n\n  const [todos, setTodos] = useState(initTodos);\n  /*useEffect(() => {\n    //DELETE request using fetch inside useEffect React hook\n    fetch('http://localhost:8080/state/delete/33', { method: 'DELETE' });\n    //empty dependency array means this effect will only run once (like componentDidMount in classes)\n  }, []);*/\n\n  async function GetList() {\n    const data = await (await fetch(\"http://localhost:8080/state/all\", {\n      method: 'GET'\n    })).json();\n    setTodos(data);\n  }\n\n  const changeTodos = todo => {\n    const newTodos = todos.map(unitTodo => {\n      if (unitTodo === todo) {\n        unitTodo.complete = !unitTodo.complete;\n      }\n\n      return unitTodo;\n    });\n    setTodos(newTodos);\n    fetch('http://localhost:8080/state/change/' + todo.id, {\n      method: 'PUT'\n    });\n  };\n\n  const deleteTodos = todo => {\n    const newTodos = todos.map(unitTodo => {\n      if (unitTodo === todo) {\n        unitTodo.complete = !unitTodo.complete;\n      }\n\n      return unitTodo;\n    });\n    setTodos(newTodos);\n    fetch('http://localhost:8080/state/change/' + todo.id, {\n      method: 'PUT'\n    });\n  };\n  /*const addTodo: AddTodo = (text: string) => {\n    /*const newTodo = { text, complete: false , id: 0};\n    setTodos([...todos, newTodo]);\n    fetch('http://localhost:8080/state/add/',\n    {\n      method: 'POST',\n      body: JSON.stringify({text: 'test', complete: false})\n    });\n  };*/\n\n\n  useEffect(() => {\n    GetList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"mylist\",\n      children: /*#__PURE__*/_jsxDEV(Todos, {\n        todos: todos,\n        changeTodos: changeTodos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"lIJQon8IAP4YNP4NE5vTep+122Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/gaspardmoindrot/todo-list/todo-list-front/src/App.tsx"],"names":["React","useState","useEffect","Todos","TodoInput","initTodos","text","complete","id","App","todos","setTodos","GetList","data","fetch","method","json","changeTodos","todo","newTodos","map","unitTodo","deleteTodos"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,WAAP;;;AAGA,MAAMC,SAAiB,GAAG,CACxB;AACEC,EAAAA,IAAI,EAAE,EADR;AAEEC,EAAAA,QAAQ,EAAE,KAFZ;AAGEC,EAAAA,EAAE,EAAE;AAHN,CADwB,CAA1B;;AAQA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACI,SAAD,CAAlC;AAEA;AACF;AACA;AACA;AACA;;AAEE,iBAAeO,OAAf,GAAyB;AACvB,UAAMC,IAAI,GAAG,MAAM,CAAC,MAAMC,KAAK,CAAC,iCAAD,EAAoC;AAACC,MAAAA,MAAM,EAAE;AAAT,KAApC,CAAZ,EAAkEC,IAAlE,EAAnB;AACAL,IAAAA,QAAQ,CAACE,IAAD,CAAR;AACD;;AAED,QAAMI,WAAwB,GAAIC,IAAD,IAAgB;AAC/C,UAAMC,QAAQ,GAAGT,KAAK,CAACU,GAAN,CAAUC,QAAQ,IAAI;AACrC,UAAIA,QAAQ,KAAKH,IAAjB,EAAuB;AACrBG,QAAAA,QAAQ,CAACd,QAAT,GAAoB,CAACc,QAAQ,CAACd,QAA9B;AACD;;AACD,aAAQc,QAAR;AACD,KALgB,CAAjB;AAMAV,IAAAA,QAAQ,CAACQ,QAAD,CAAR;AACAL,IAAAA,KAAK,CAAC,wCAAwCI,IAAI,CAACV,EAA9C,EAAkD;AAAEO,MAAAA,MAAM,EAAE;AAAV,KAAlD,CAAL;AACD,GATD;;AAWA,QAAMO,WAAwB,GAAIJ,IAAD,IAAgB;AAC/C,UAAMC,QAAQ,GAAGT,KAAK,CAACU,GAAN,CAAUC,QAAQ,IAAI;AACrC,UAAIA,QAAQ,KAAKH,IAAjB,EAAuB;AACrBG,QAAAA,QAAQ,CAACd,QAAT,GAAoB,CAACc,QAAQ,CAACd,QAA9B;AACD;;AACD,aAAQc,QAAR;AACD,KALgB,CAAjB;AAMAV,IAAAA,QAAQ,CAACQ,QAAD,CAAR;AACAL,IAAAA,KAAK,CAAC,wCAAwCI,IAAI,CAACV,EAA9C,EAAkD;AAAEO,MAAAA,MAAM,EAAE;AAAV,KAAlD,CAAL;AACD,GATD;AAWA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEEb,EAAAA,SAAS,CAAC,MAAM;AAACU,IAAAA,OAAO;AAAG,GAAlB,EAAoB,EAApB,CAAT;AACA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAIF,KAAhB;AAAuB,QAAA,WAAW,EAAIO;AAAtC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AASD;;GAxDQR,G;;KAAAA,G;AA0DT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Todos } from './Todos';\nimport { TodoInput } from './TodoInput';\nimport './App.css';\nimport { triggerAsyncId } from 'node:async_hooks';\n\nconst initTodos: Todo[] = [\n  {\n    text: '',\n    complete: false,\n    id: 0,\n  },\n];\n\nfunction App() {\n  const [todos, setTodos] = useState(initTodos);\n\n  /*useEffect(() => {\n    //DELETE request using fetch inside useEffect React hook\n    fetch('http://localhost:8080/state/delete/33', { method: 'DELETE' });\n    //empty dependency array means this effect will only run once (like componentDidMount in classes)\n  }, []);*/\n\n  async function GetList() {\n    const data = await (await fetch(\"http://localhost:8080/state/all\", {method: 'GET'})).json();\n    setTodos(data);\n  }\n\n  const changeTodos: ChangeTodos = (todo: Todo) => {\n    const newTodos = todos.map(unitTodo => {\n      if (unitTodo === todo) {\n        unitTodo.complete = !unitTodo.complete;\n      }\n      return (unitTodo);\n    });\n    setTodos(newTodos);\n    fetch('http://localhost:8080/state/change/' + todo.id, { method: 'PUT' });\n  };\n\n  const deleteTodos: ChangeTodos = (todo: Todo) => {\n    const newTodos = todos.map(unitTodo => {\n      if (unitTodo === todo) {\n        unitTodo.complete = !unitTodo.complete;\n      }\n      return (unitTodo);\n    });\n    setTodos(newTodos);\n    fetch('http://localhost:8080/state/change/' + todo.id, { method: 'PUT' });\n  };\n\n  /*const addTodo: AddTodo = (text: string) => {\n    /*const newTodo = { text, complete: false , id: 0};\n    setTodos([...todos, newTodo]);\n    fetch('http://localhost:8080/state/add/',\n    {\n      method: 'POST',\n      body: JSON.stringify({text: 'test', complete: false})\n    });\n  };*/\n\n  useEffect(() => {GetList()}, []);\n  return (\n    <>\n      <h1>Todos</h1>\n      <ul className=\"mylist\">\n        <Todos todos = {todos} changeTodos = {changeTodos} />\n      </ul>\n      <TodoInput/>\n    </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}