package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@Controller // This means that this class is a Controller
@RequestMapping(path="/state") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String text
      , @RequestParam boolean complete) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    User n = new User();
    n.setText(text);
    n.setComplete(complete);
    userRepository.save(n);
    return "Saved";
  }

  @PostMapping(path="/add2/{str}")
  public @ResponseBody String addNewUser2 (@PathVariable String str) {
    User n = new User();
    n.setText(str);
    n.setComplete(false);
    userRepository.save(n);
    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }

  @PutMapping("/change/{id}")
  public void changeUser (@PathVariable Long id) {
    try {
	userRepository.findById(id).get().setComplete(!userRepository.findById(id).get().getComplete());
	userRepository.save(userRepository.findById(id).get());
    } catch (Exception e) { }
  }

  @DeleteMapping("/delete/{id}")
  public void deleteUser (@PathVariable Long id) {
    userRepository.deleteById(Long.valueOf(id));
  }
}
